{
	"info": {
		"_postman_id": "7fb655b2-2d42-49e7-8588-b7e809f1ef70",
		"name": "Serverest",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "21977325"
	},
	"item": [
		{
			"name": "Testes",
			"item": [
				{
					"name": "/login",
					"item": [
						{
							"name": "Teste automatizado Login",
							"item": [
								{
									"name": "CT01-Realizar Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message']\r",
													"\r",
													"pm.test(`Resposta contém atributo \"message\"`, () => {\r",
													"        pm.expect(response[\"message\"]).to.exist\r",
													"   }) \r",
													"pm.test(`Resposta contém atributo \"authorization\"`, () => {\r",
													"        pm.expect(response[\"authorization\"]).to.exist\r",
													"   }) \r",
													"\r",
													"//Envia token para variável de ambiente automaticamente sem precisar copiar e colar;\r",
													"pm.test(\"Envia authorization para variável de ambiente.\", function (){\r",
													"const response = pm.response.json();\r",
													"//pm.environment.set('tokenFconclui', response.authorization);\r",
													"pm.environment.set('token', response.authorization.slice(7))\r",
													"})\r",
													"   \r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada', () => {\r",
													"        pm.expect(response.message).have.string('Login realizado com sucesso')\r",
													"    })\r",
													"\r",
													"    //Valida a mensagem principal\r",
													"const mensagem = 'Login realizado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"    console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"{{senhaValida}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/login"
									},
									"response": [
										{
											"name": "Login realizado",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"{{senhaValida}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/login"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "9946b62e-94eb-4731-b8bb-bdc43a5eb0ad"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "269"
												},
												{
													"key": "Date",
													"value": "Mon, 15 Aug 2022 19:37:34 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Login realizado com sucesso\",\n    \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20uYnIiLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNjYwNTkyMjU0LCJleHAiOjE2NjA1OTI4NTR9.DWcd1Vjh5NTGISJZqN5Jjvyau3HQ0sP1uSxnI3mrYM0\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "/usuários",
					"item": [
						{
							"name": "Teste automatizado-Cadastra/Exclui e Busca um usuário",
							"item": [
								{
									"name": "CT02-Cadastra/exclui e busca um usuário",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Created\", () => {\r",
													"  pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message', '_id']\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença  ${atributo}`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada', () => {\r",
													"        pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
													"    })\r",
													"    \r",
													" //Valida a mensagem principal\r",
													"const mensagem = 'Cadastro realizado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"pm.test(\"Já exclui o usuario\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('id', response._id);\r",
													"})\r",
													"\r",
													"let url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('id');\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//busca o usuario criado\r",
													"pm.test(\"busca o usuario que acabou de ser deletado\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('id', response._id);\r",
													"})\r",
													"\r",
													"const  getUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'GET',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(getUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"testapexcluir\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/usuarios"
									},
									"response": [
										{
											"name": "Usuário cadastrado",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/usuarios"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "b631d39b-c7bc-43a9-8eb0-ce2759bc9c1d"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "82"
												},
												{
													"key": "Date",
													"value": "Tue, 16 Aug 2022 12:19:34 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"v1VdyCiyBTzAcstx\"\n}"
										}
									]
								},
								{
									"name": "CT03-Cadastra/exclui e busca um usuário",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Created\", () => {\r",
													"  pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"pm.test(\"PUT com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"pm.test(`Resposta contém atributo \"message\"`, () => { \r",
													"        pm.expect(response[\"message\"]).to.exist\r",
													"    })\r",
													"\r",
													"pm.test(`Resposta contém atributo \"_id\"`, () => { \r",
													"        pm.expect(response[\"_id\"]).to.exist\r",
													"    })\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada', () => {\r",
													"        pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const mensagem = 'Cadastro realizado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"pm.test(\"Já exclui o usuario\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('idU', response._id);\r",
													"})\r",
													"\r",
													"let url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('idU');\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"//busca para ver se deletou mesmo\r",
													"\r",
													"pm.test(\"busca o usuario que acabou de ser deletado\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('idU', response._id);\r",
													"})\r",
													"\r",
													"const  getUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'GET',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(getUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console \r",
													"\r",
													"\r",
													"/*Excluindo o usuario criado\r",
													"pm.test(\"Exclui o usuario\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('idU', response._id);\r",
													"})\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('idU');\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{senhaValida}}\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/usuarios/{{idU}}"
									},
									"response": [
										{
											"name": "Cadastrado",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{senhaValida}}\",\r\n  \"administrador\": \"true\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/usuarios/0uxuPY0cbmQhpEz1"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "35075368-afb7-4955-80bd-b8c30423ec29"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "82"
												},
												{
													"key": "Date",
													"value": "Tue, 16 Aug 2022 16:36:12 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"PLlW3svimJgBKJkq\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Fluxo de Cadastro de usuário",
							"item": [
								{
									"name": "CT04-Cadastra e envia Id para DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Created\", () => {\r",
													"  pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message', '_id']\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada, valida atributo de Conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const mensagem = 'Cadastro realizado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"//Envia Id para Deletar \r",
													"pm.test(\"Envia id para variável de ambiente.\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('idUeX', response._id);\r",
													"})\r",
													"\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/usuarios"
									},
									"response": [
										{
											"name": "Usuário cadastrado",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/usuarios"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "b631d39b-c7bc-43a9-8eb0-ce2759bc9c1d"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "82"
												},
												{
													"key": "Date",
													"value": "Tue, 16 Aug 2022 12:19:34 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"v1VdyCiyBTzAcstx\"\n}"
										}
									]
								},
								{
									"name": "CT05-Buscar usuário por ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"    //Validação de Atributos (Presença)\r",
													"const atributos = ['nome', 'email', 'password', 'administrador', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença '${atributo}'`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"    console.log(response) //coloca a resposta do body no console \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/usuarios/{{idUeX}}"
									},
									"response": [
										{
											"name": "Usuário encontrado",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/usuarios/2i8b1zjVP37MbcWZ"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "89d089a7-6ac9-48ed-a2ae-880d73be77b3"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "151"
												},
												{
													"key": "Date",
													"value": "Wed, 10 Aug 2022 21:08:43 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"nome\": \"Fulano da Silva\",\n    \"email\": \"fulano@qa.com.br\",\n    \"password\": \"teste\",\n    \"administrador\": \"true\",\n    \"_id\": \"2i8b1zjVP37MbcWZ\"\n}"
										}
									]
								},
								{
									"name": "CT06-Listar usuário cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"//Valida o status code\r",
													"const statusCode = 200\r",
													"pm.test(`Status: ${statusCode}, OK, usuário listado`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['quantidade', 'usuarios']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença '${atributo}'`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/usuarios"
									},
									"response": [
										{
											"name": "Listar produto",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"quantidade\": 2,\r\n  \"usuarios\": [\r\n    {\r\n      \"nome\": \"Logitech MX Vertical\",\r\n      \"preco\": 470,\r\n      \"descricao\": \"Mouse\",\r\n      \"quantidade\": 381,\r\n      \"_id\": \"BeeJh5lz3k6kSIzA\"\r\n    },\r\n    {\r\n      \"nome\": \"Samsung 60 polegadas\",\r\n      \"preco\": 5240,\r\n      \"descricao\": \"TV\",\r\n      \"quantidade\": 49977,\r\n      \"_id\": \"K6leHdftCeOJj8BJ\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:3000/produtos"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "9f87d1c0-8e3e-40be-9f03-0ae648aa7954"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "435"
												},
												{
													"key": "Date",
													"value": "Tue, 09 Aug 2022 19:33:54 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"quantidade\": 2,\n    \"produtos\": [\n        {\n            \"nome\": \"Logitech MX Vertical\",\n            \"preco\": 470,\n            \"descricao\": \"Mouse\",\n            \"quantidade\": 382,\n            \"_id\": \"BeeJh5lz3k6kSIzA\"\n        },\n        {\n            \"nome\": \"Samsung 60 polegadas\",\n            \"preco\": 5240,\n            \"descricao\": \"TV\",\n            \"quantidade\": 49977,\n            \"_id\": \"K6leHdftCeOJj8BJ\"\n        }\n    ]\n}"
										}
									]
								},
								{
									"name": "CT07-Alterar usuário",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"console.log(response.message)  //coloca a resposta do body no console \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"PUT com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença) \r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"//const atributos = ['message'] Tem a mesma função\r",
													"//pm.test(`Resposta contém atributo \"message\"`, () => {\r",
													"       // pm.expect(response[\"message\"]).to.exist\r",
													"  // })\r",
													"  \r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada', () => {\r",
													"        pm.expect(response.message).have.string('Registro alterado com sucesso') \r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const message = 'Registro alterado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${message}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(message);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"    //Excluindo o usuario criado\r",
													"pm.test(\"Já exclui o usuario, caso seja cadastrado!\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('id', response._id);\r",
													"})\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('id');\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{senhaValida}}\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/usuarios/{{idUeX}}"
									},
									"response": [
										{
											"name": "Alterar usuário",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n    \"nome\": \"Foster_Langos1\",\r\n    \"email\": \"Alessia16@yahoo.com\",\r\n    \"password\": \"teste\",\r\n    \"administrador\": \"true\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/usuarios/3nSgCL7v4RvkUxie"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "e78af378-41bf-4733-ae58-a42c5329f620"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "50"
												},
												{
													"key": "Date",
													"value": "Wed, 17 Aug 2022 21:46:07 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Registro alterado com sucesso\"\n}"
										}
									]
								},
								{
									"name": "CT08-Excluir usuário",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"console.log(response) //coloca a resposta do body no console \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"DELETE com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada, valida atributo de conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Registro excluído com sucesso')\r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const mensagem = 'Registro excluído com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/usuarios/{{idUeX}}"
									},
									"response": [
										{
											"name": "Usuário excluído",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/usuarios/x4QoNPu4ft3AxZhs"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "a0260625-a674-44ea-8951-c23f81ad6acd"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "51"
												},
												{
													"key": "Date",
													"value": "Wed, 10 Aug 2022 20:53:32 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Registro excluído com sucesso\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "/produtos",
					"item": [
						{
							"name": "Teste automatizado-que Cadastra/Exclui e Busca um produto",
							"item": [
								{
									"name": "CT09-Cadastrada/exclui e busca produto com sucesso",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({ \r",
													"           \"email\": \"tamara@qa.com.br\",\r",
													"           \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Created\", () => {\r",
													"  pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada, valida atributo de Conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
													"    })\r",
													"\r",
													"     //Valida a mensagem principal\r",
													"const mensagem = 'Cadastro realizado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"//Excluir produto cadastrado\r",
													" pm.test(\"Excluir produto\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('idP', response._id);\r",
													"})\r",
													"\r",
													"let url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('idP');\r",
													"let token = 'Bearer ' + pm.environment.get('token')\r",
													"console.log(pm.environment.get('token'))\r",
													"\r",
													"const  delUser = {\r",
													"    url:`${url}/produtos/${id}`,\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' : `${token}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"})\r",
													"\r",
													"//busca para ver se deletou mesmo\r",
													"pm.test(\"busca o produto que acabou de ser deletado\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('idP', response._id);\r",
													"})\r",
													"\r",
													"const  getUser = {\r",
													"    url: `${url}/produtos/${id}` ,   //variavel\r",
													"    method: 'GET',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(getUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": 50,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 255\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/produtos"
									},
									"response": [
										{
											"name": "Cadastrar Produtos",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": 50,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 255\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/produtos"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "c3b2816b-16b8-4a5c-82bf-997554e6a866"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "82"
												},
												{
													"key": "Date",
													"value": "Wed, 17 Aug 2022 22:05:37 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"gxUcFwysRYqmqjZ6\"\n}"
										}
									]
								},
								{
									"name": "CT10-Cadastrada/exclui e busca produto com sucesso",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"console.log(response.message)  //coloca a resposta do body no console \r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Created\", () => {\r",
													"  pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença) \r",
													"const atributos = ['message', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"//const atributos = ['message'] Tem a mesma função\r",
													"//pm.test(`Resposta contém atributo \"message\"`, () => {\r",
													"       // pm.expect(response[\"message\"]).to.exist\r",
													"  // })\r",
													"  \r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada', () => {\r",
													"        pm.expect(response.message).have.string('Cadastro realizado com sucesso') \r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const message = 'Cadastro realizado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${message}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(message);\r",
													"    });\r",
													"\r",
													"    //Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"//Excluir produto cadastrado\r",
													" pm.test(\"Excluir produto\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('idPd', response._id);\r",
													"})\r",
													"\r",
													"let url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('idPd');\r",
													"let token = 'Bearer ' + pm.environment.get('token')\r",
													"console.log(pm.environment.get('token'))\r",
													"\r",
													"const  delUser = {\r",
													"    url:`${url}/produtos/${id}`,\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' : `${token}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//busca para ver se deletou mesmo\r",
													"pm.test(\"busca o produto que acabou de ser deletado\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('idPd', response._id);\r",
													"})\r",
													"\r",
													"const  getUser = {\r",
													"    url: `${url}/produtos/${id}` ,   //variavel\r",
													"    method: 'GET',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(getUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"{{$randomUserName}}\",\r\n    \"preco\": 40,\r\n    \"descricao\": \"{{randomDescribe}}\",\r\n    \"quantidade\": 382\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/produtos/{{idPd}}"
									},
									"response": [
										{
											"name": "Cadastrado com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"nome\": \"Logi Verti\",\r\n    \"preco\": 470,\r\n    \"descricao\": \"Mouse\",\r\n    \"quantidade\": 382\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/produtos/BeJh5lz3k6kSIz"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "87deb7b1-8d11-4f4a-8f12-207f048fab95"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "82"
												},
												{
													"key": "Date",
													"value": "Thu, 18 Aug 2022 01:26:23 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"lX4peg5qEknLs7ZR\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Teste de Fluxo de Cadastro de produto",
							"item": [
								{
									"name": "CT11-Cadastrar e envia Id para DELETE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({ \r",
													"           \"email\": \"tamara@qa.com.br\",\r",
													"           \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Created\", () => {\r",
													"  pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada, valida atributo de conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const mensagem = 'Cadastro realizado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"//envia id cadastrado para variável de ambiente\r",
													"pm.test(\"Envia id para variável de ambiente.\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('idPeX', response._id);\r",
													"})\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": 50,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 255\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/produtos"
									},
									"response": [
										{
											"name": "Cadastrar Produtos",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": 50,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 255\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/produtos"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "c3b2816b-16b8-4a5c-82bf-997554e6a866"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "82"
												},
												{
													"key": "Date",
													"value": "Wed, 17 Aug 2022 22:05:37 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"gxUcFwysRYqmqjZ6\"\n}"
										}
									]
								},
								{
									"name": "CT12-Buscar Produto por ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['nome', 'preco', 'descricao', 'quantidade', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/produtos/{{idPeX}}"
									},
									"response": [
										{
											"name": "Buscar Produto por ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/produtos/8JmPuLOJvyFWJkTP"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "bcbe149f-2664-487c-8d42-f87678785a22"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "135"
												},
												{
													"key": "Date",
													"value": "Wed, 17 Aug 2022 22:12:20 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"nome\": \"Generic Cotton Table\",\n    \"preco\": 50,\n    \"descricao\": \"Metal\",\n    \"quantidade\": 255,\n    \"_id\": \"8JmPuLOJvyFWJkTP\"\n}"
										}
									]
								},
								{
									"name": "CT13-Listar produtos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"//Valida o status code\r",
													"const statusCode = 200\r",
													"pm.test(`Status: ${statusCode}, OK, produto listado`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos  = ['quantidade', 'produtos']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"}) \r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/produtos"
									},
									"response": [
										{
											"name": "Listar produto",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"quantidade\": 2,\r\n  \"usuarios\": [\r\n    {\r\n      \"nome\": \"Logitech MX Vertical\",\r\n      \"preco\": 470,\r\n      \"descricao\": \"Mouse\",\r\n      \"quantidade\": 381,\r\n      \"_id\": \"BeeJh5lz3k6kSIzA\"\r\n    },\r\n    {\r\n      \"nome\": \"Samsung 60 polegadas\",\r\n      \"preco\": 5240,\r\n      \"descricao\": \"TV\",\r\n      \"quantidade\": 49977,\r\n      \"_id\": \"K6leHdftCeOJj8BJ\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:3000/produtos"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "9f87d1c0-8e3e-40be-9f03-0ae648aa7954"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "435"
												},
												{
													"key": "Date",
													"value": "Tue, 09 Aug 2022 19:33:54 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"quantidade\": 2,\n    \"produtos\": [\n        {\n            \"nome\": \"Logitech MX Vertical\",\n            \"preco\": 470,\n            \"descricao\": \"Mouse\",\n            \"quantidade\": 382,\n            \"_id\": \"BeeJh5lz3k6kSIzA\"\n        },\n        {\n            \"nome\": \"Samsung 60 polegadas\",\n            \"preco\": 5240,\n            \"descricao\": \"TV\",\n            \"quantidade\": 49977,\n            \"_id\": \"K6leHdftCeOJj8BJ\"\n        }\n    ]\n}"
										}
									]
								},
								{
									"name": "CT14-Alterar produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"console.log(response.message)  //coloca a resposta do body no console \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"PUT com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença) \r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"//const atributos = ['message'] Tem a mesma função\r",
													"//pm.test(`Resposta contém atributo \"message\"`, () => {\r",
													"       // pm.expect(response[\"message\"]).to.exist\r",
													"  // })\r",
													"  \r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada, valida atributo de Conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Registro alterado com sucesso') \r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const message = 'Registro alterado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${message}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(message);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"//Excluir produto cadastrado\r",
													" pm.test(\"Já exclui o produto, caso tenha cadastrado!\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('idP', response._id);\r",
													"})\r",
													"\r",
													"let token = 'Bearer ' + pm.environment.get('token')\r",
													"console.log(pm.environment.get('token'))\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('idP');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url:`${url}/produtos/${id}`,\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' : `${token}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"preco\": 50,\r\n  \"descricao\": \"{{$randomDescribe}}\",\r\n  \"quantidade\": 255\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/produtos/{{idPeX}}"
									},
									"response": [
										{
											"name": "produto alterado",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 382\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/produtos/BeeJh5lz3k6kSIzA"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "f4554612-4599-4bbf-aac4-635ea111a0dd"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "50"
												},
												{
													"key": "Date",
													"value": "Thu, 18 Aug 2022 00:54:26 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Registro alterado com sucesso\"\n}"
										}
									]
								},
								{
									"name": "CT15-Excluir produto",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({ \r",
													"           \"email\": \"tamara@qa.com.br\",\r",
													"           \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"//Valida o status code\r",
													"const statusCode = 200\r",
													"pm.test(`Status: ${statusCode}, OK, foi excluído`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"DELETE com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message']\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo Presença \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada, valida atributo de conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Registro excluído com sucesso')\r",
													"    })\r",
													"\r",
													" //Valida a mensagem principal\r",
													"const mensagem = 'Registro excluído com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/produtos/{{idPeX}}"
									},
									"response": [
										{
											"name": "Produto excluído com sucesso",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/produtos/{{_id}}"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "300c546a-59f0-4fe3-ae78-bc952d1e5ea8"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "51"
												},
												{
													"key": "Date",
													"value": "Wed, 17 Aug 2022 18:37:53 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Registro excluído com sucesso\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "/carrinhos",
					"item": [
						{
							"name": "Concluir compra e diminui estoque",
							"item": [
								{
									"name": "CT16-Cadastrar carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({ \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"//Valida o status code\r",
													"const statusCode = 201\r",
													"pm.test(`Status: ${statusCode}, OK, carrinhos cadastrado`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Created\", () => {\r",
													"  pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada, valida atributo de conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const mensagem = 'Cadastro realizado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"pm.test(\"Envia id para variável de ambiente.\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('idCex', response._id);\r",
													"})\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 3\r\n    }\r\n  ]}\r\n            ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/carrinhos"
									},
									"response": []
								},
								{
									"name": "CT17-Listar carrinhos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"//Valida o status code\r",
													"const statusCode = 200\r",
													"pm.test(`Status: ${statusCode}, OK, carrinhos listados`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['quantidade', 'carrinhos']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/carrinhos"
									},
									"response": []
								},
								{
									"name": "CT18-Buscar carrinho com ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"//Valida o status code\r",
													"const statusCode = 200\r",
													"pm.test(`Status: ${statusCode}, OK, carrinho buscado`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['produtos']\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/carrinhos/qbMqntef4iTOwWfg"
									},
									"response": [
										{
											"name": "Buscar carrinho com ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/carrinhos/qbMqntef4iTOwWfg"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "873da086-6279-4b55-8fc5-8c8c84429933"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "401"
												},
												{
													"key": "Date",
													"value": "Thu, 18 Aug 2022 02:31:58 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"produtos\": [\n        {\n            \"idProduto\": \"BeeJh5lz3k6kSIzA\",\n            \"quantidade\": 2,\n            \"precoUnitario\": 470\n        },\n        {\n            \"idProduto\": \"K6leHdftCeOJj8BJ\",\n            \"quantidade\": 1,\n            \"precoUnitario\": 5240\n        }\n    ],\n    \"precoTotal\": 6180,\n    \"quantidadeTotal\": 3,\n    \"idUsuario\": \"oUb7aGkMtSEPf6BZ\",\n    \"_id\": \"qbMqntef4iTOwWfg\"\n}"
										}
									]
								},
								{
									"name": "CT19-Conclui a compra excluindo assim o carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({ \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"console.log(response)\r",
													"//Valida o status code\r",
													"const statusCode = 200\r",
													"pm.test(`Status: ${statusCode}, OK, compra concluída e carrinho excluído`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"DELETE com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada, valida atributo de conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Registro excluído com sucesso')\r",
													"    })\r",
													"\r",
													" //Valida a mensagem principal\r",
													"const mensagem = 'Registro excluído com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/carrinhos/concluir-compra"
									},
									"response": [
										{
											"name": "concluir-compra",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/carrinhos/concluir-compra"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "ae732f70-a6e5-4755-a166-c5a63b622d11"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "51"
												},
												{
													"key": "Date",
													"value": "Thu, 18 Aug 2022 02:22:04 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Registro excluído com sucesso\"\n}"
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": {
									"token": "{{token}}"
								}
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Cancelar compra-excluir o carrinho e reabestece estoque",
							"item": [
								{
									"name": "CT20-Cadastrar carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({ \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"//Valida o status code\r",
													"const statusCode = 201\r",
													"pm.test(`Status: ${statusCode}, OK, carrinhos cadastrado`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Created\", () => {\r",
													"  pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada, valida atributo de conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const mensagem = 'Cadastro realizado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"//envia id para variavel de ambiente\r",
													"pm.test(\"Envia id para variável de ambiente.\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('idCex', response._id);\r",
													"})\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 3\r\n    }\r\n  ]}\r\n            ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/carrinhos"
									},
									"response": []
								},
								{
									"name": "CT21-Listar carrinhos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"//Valida o status code\r",
													"const statusCode = 200\r",
													"pm.test(`Status: ${statusCode}, OK, carrinhos listados`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['quantidade', 'carrinhos']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/carrinhos"
									},
									"response": []
								},
								{
									"name": "CT22-Buscar carrinho com ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"//Valida o status code\r",
													"const statusCode = 200\r",
													"pm.test(`Status: ${statusCode}, OK, carrinho buscado`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['produtos']\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/carrinhos/qbMqntef4iTOwWfg"
									},
									"response": [
										{
											"name": "Buscar carrinho com ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/carrinhos/qbMqntef4iTOwWfg"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "873da086-6279-4b55-8fc5-8c8c84429933"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "401"
												},
												{
													"key": "Date",
													"value": "Thu, 18 Aug 2022 02:31:58 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"produtos\": [\n        {\n            \"idProduto\": \"BeeJh5lz3k6kSIzA\",\n            \"quantidade\": 2,\n            \"precoUnitario\": 470\n        },\n        {\n            \"idProduto\": \"K6leHdftCeOJj8BJ\",\n            \"quantidade\": 1,\n            \"precoUnitario\": 5240\n        }\n    ],\n    \"precoTotal\": 6180,\n    \"quantidadeTotal\": 3,\n    \"idUsuario\": \"oUb7aGkMtSEPf6BZ\",\n    \"_id\": \"qbMqntef4iTOwWfg\"\n}"
										}
									]
								},
								{
									"name": "CT23-Cancela a compra, exclui o carrinho e reabastece o estoque",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({ \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"console.log(response)\r",
													"//Valida o status code\r",
													"const statusCode = 200\r",
													"pm.test(`Status: ${statusCode}, OK, compra concluída e carrinho excluído`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"DELETE com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada, valida atributo de conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Registro excluído com sucesso')\r",
													"    })\r",
													"\r",
													" //Valida a mensagem principal\r",
													"const mensagem = 'Registro excluído com sucesso. Estoque dos produtos reabastecido'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/carrinhos/cancelar-compra"
									},
									"response": [
										{
											"name": "cancelar compra",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/carrinhos/cancelar-compra"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "3d76906a-24ac-4997-8617-ae46ee6b406a"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "86"
												},
												{
													"key": "Date",
													"value": "Thu, 18 Aug 2022 02:18:34 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Registro excluído com sucesso. Estoque dos produtos reabastecido\"\n}"
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": {
									"token": "{{token}}"
								}
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "/Fluxo de compra",
					"item": [
						{
							"name": "Fluxo de Compra-Conclui",
							"item": [
								{
									"name": "CT24-Realizar Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message']\r",
													"\r",
													"pm.test(`Resposta contém atributo \"message\"`, () => {\r",
													"        pm.expect(response[\"message\"]).to.exist\r",
													"   }) \r",
													"pm.test(`Resposta contém atributo \"authorization\"`, () => {\r",
													"        pm.expect(response[\"authorization\"]).to.exist\r",
													"   }) \r",
													"      \r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada', () => {\r",
													"        pm.expect(response.message).have.string('Login realizado com sucesso')\r",
													"    })\r",
													"\r",
													"    //Valida a mensagem principal\r",
													"const mensagem = 'Login realizado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Envia token para variável de ambiente automaticamente sem precisar copiar e colar;\r",
													"pm.test(\"Envia authorization para variável de ambiente.\", function (){\r",
													"const response = pm.response.json();\r",
													"//pm.environment.set('tokenFconclui', response.authorization);\r",
													"pm.environment.set('tokenFconclui', response.authorization.slice(7))\r",
													"})\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"    console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({ \r",
													"            \"email\": \"master@qa.com.br\",\r",
													"            \"password\": \"senha\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{emailValido2}}\",\r\n  \"password\": \"{{senhaValida2}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/login"
									},
									"response": [
										{
											"name": "Realizar Login",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"{{senhaValida}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/login"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "0106720d-b2e3-4464-9b40-a8075a62438b"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "269"
												},
												{
													"key": "Date",
													"value": "Thu, 18 Aug 2022 02:42:46 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Login realizado com sucesso\",\n    \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20uYnIiLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNjYwNzkwNTY2LCJleHAiOjE2NjA3OTExNjZ9.5_Ufy0FJ5blhabfguAbS9tL5ORULO_a3OewJ2LAXf8k\"\n}"
										}
									]
								},
								{
									"name": "CT25-Cadastrar carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({ \r",
													"            \"email\": \"master@qa.com.br\",\r",
													"            \"password\": \"senha\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"//Valida o status code\r",
													"const statusCode = 201\r",
													"pm.test(`Status: ${statusCode}, OK, carrinhos cadastrado`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Created\", () => {\r",
													"  pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada, valida atributo de conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const mensagem = 'Cadastro realizado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"//envia id para variavel de ambiente \r",
													"pm.test(\"Envia id para variável de ambiente.\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('idCex', response._id);\r",
													"})\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenFconclui}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "  {\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\":\"4oOLTpRw0vFGEbz2\",\r\n      \"quantidade\": 6\r\n    }\r\n  ]}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/carrinhos"
									},
									"response": [
										{
											"name": "Carrinho cadastrado",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K8HmINHKU1lm6dU7\",\r\n      \"quantidade\": 3\r\n    }\r\n  ]}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/carrinhos"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "60b9db30-de37-4545-b706-99f68138b512"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "82"
												},
												{
													"key": "Date",
													"value": "Thu, 18 Aug 2022 02:54:31 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"LcZM6qzBAGcQUfMa\"\n}"
										}
									]
								},
								{
									"name": "CT26-Conclui a compra excluindo assim o carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({ \r",
													"            \"email\": \"master@qa.com.br\",\r",
													"            \"password\": \"senha\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"console.log(response)\r",
													"//Valida o status code\r",
													"const statusCode = 200\r",
													"pm.test(`Status: ${statusCode}, OK, compra concluída e carrinho excluído`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"DELETE com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada, valida atributo de conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Registro excluído com sucesso')\r",
													"    })\r",
													"\r",
													" //Valida a mensagem principal\r",
													"const mensagem = 'Registro excluído com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenFconclui}}"
											}
										},
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/carrinhos/concluir-compra"
									},
									"response": [
										{
											"name": "concluir-compra",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/carrinhos/concluir-compra"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "ae732f70-a6e5-4755-a166-c5a63b622d11"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "51"
												},
												{
													"key": "Date",
													"value": "Thu, 18 Aug 2022 02:22:04 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Registro excluído com sucesso\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Fluxo de Compra-Cancela",
							"item": [
								{
									"name": "CT27-Realizar Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message']\r",
													"\r",
													"pm.test(`Resposta contém atributo \"message\"`, () => {\r",
													"        pm.expect(response[\"message\"]).to.exist\r",
													"   }) \r",
													"pm.test(`Resposta contém atributo \"authorization\"`, () => {\r",
													"        pm.expect(response[\"authorization\"]).to.exist\r",
													"   }) \r",
													"   \r",
													"pm.test(\"Envia authorization para variável de ambiente.\", function (){\r",
													"const response = pm.response.json();\r",
													"//pm.environment.set('tokenFconclui', response.authorization);\r",
													"pm.environment.set('tokenFcancel', response.authorization.slice(7))\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada', () => {\r",
													"        pm.expect(response.message).have.string('Login realizado com sucesso')\r",
													"    })\r",
													"\r",
													"    //Valida a mensagem principal\r",
													"const mensagem = 'Login realizado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"    console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({ \r",
													"            \"email\": \"ciclano@qa.com.br\",\r",
													"            \"password\": \"fluxo\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{emailValido3}}\",\r\n  \"password\": \"{{senhaValida3}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/login"
									},
									"response": [
										{
											"name": "Realizar Login",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"{{senhaValida}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/login"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "0106720d-b2e3-4464-9b40-a8075a62438b"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "269"
												},
												{
													"key": "Date",
													"value": "Thu, 18 Aug 2022 02:42:46 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Login realizado com sucesso\",\n    \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20uYnIiLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNjYwNzkwNTY2LCJleHAiOjE2NjA3OTExNjZ9.5_Ufy0FJ5blhabfguAbS9tL5ORULO_a3OewJ2LAXf8k\"\n}"
										}
									]
								},
								{
									"name": "CT28-Cadastrar carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({ \r",
													"            \"email\": \"ciclano@qa.com.br\",\r",
													"            \"password\": \"fluxo\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"//Valida o status code\r",
													"const statusCode = 201\r",
													"pm.test(`Status: ${statusCode}, OK, carrinhos cadastrado`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Created\", () => {\r",
													"  pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada, valida atributo de conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const mensagem = 'Cadastro realizado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//envia id para variavel de ambiente\r",
													"pm.test(\"Envia id para variável de ambiente.\", function (){\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('idCex', response._id);\r",
													"})\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenFcancel}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "  {\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"52lftwUqjcnkGKyV\",\r\n      \"quantidade\": 6\r\n    }\r\n  ]}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/carrinhos"
									},
									"response": [
										{
											"name": "Carrinho cadastrado",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K8HmINHKU1lm6dU7\",\r\n      \"quantidade\": 3\r\n    }\r\n  ]}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/carrinhos"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "60b9db30-de37-4545-b706-99f68138b512"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "82"
												},
												{
													"key": "Date",
													"value": "Thu, 18 Aug 2022 02:54:31 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"LcZM6qzBAGcQUfMa\"\n}"
										}
									]
								},
								{
									"name": "CT29-Cancela a compra, exclui o carrinho e reabastece o estoque",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({ \r",
													"            \"email\": \"ciclano@qa.com.br\",\r",
													"            \"password\": \"fluxo\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"console.log(response)\r",
													"//Valida o status code\r",
													"const statusCode = 200\r",
													"pm.test(`Status: ${statusCode}, OK, compra concluída e carrinho excluído`, function () {\r",
													"    pm.response.to.have.status(statusCode);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"DELETE com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem correta retornada, valida atributo de conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Registro excluído com sucesso')\r",
													"    })\r",
													"\r",
													" //Valida a mensagem principal\r",
													"const mensagem = 'Registro excluído com sucesso. Estoque dos produtos reabastecido'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenFcancel}}"
											}
										},
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/carrinhos/cancelar-compra"
									},
									"response": [
										{
											"name": "cancelar compra",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/carrinhos/cancelar-compra"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "3d76906a-24ac-4997-8617-ae46ee6b406a"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "86"
												},
												{
													"key": "Date",
													"value": "Thu, 18 Aug 2022 02:18:34 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Registro excluído com sucesso. Estoque dos produtos reabastecido\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Teste Regressivos-com Erros Esperados na Doc",
					"item": [
						{
							"name": "/login -teste com erro",
							"item": [
								{
									"name": "CT30-Email vazio",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"\r",
													"//Valida o status code\r",
													"const statusCodeBad = 400\r",
													"pm.test(`Status: ${statusCodeBad}, bad request`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Bad Request\", () => {\r",
													"  pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"POST sem sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['email']\r",
													"\r",
													"pm.test(`Resposta contém atributo \"email\"`, () => {\r",
													"        pm.expect(response[\"email\"]).to.exist\r",
													"   })\r",
													"   \r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem retornada', () => {\r",
													"        pm.expect(response.email).have.string('email não pode ficar em branco')\r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const message = 'email não pode ficar em branco'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${message}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(message);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"{{senhaValida}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/login"
									},
									"response": [
										{
											"name": "Email em branco",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"{{senhaValida}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/login"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "68c6d6d2-8d55-4e8a-b6ff-df57e6f1f65f"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "50"
												},
												{
													"key": "Date",
													"value": "Mon, 15 Aug 2022 19:18:10 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"email não pode ficar em branco\"\n}"
										}
									]
								},
								{
									"name": "CT31-Email inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"\r",
													"//Valida o status code\r",
													"const statusCodeBad = 400\r",
													"pm.test(`Status: ${statusCodeBad}, bad request`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Bad Request\", () => {\r",
													"  pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"POST sem sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['email']\r",
													"\r",
													"pm.test(`Resposta contém atributo \"email\"`, () => {\r",
													"        pm.expect(response[\"email\"]).to.exist\r",
													"   })\r",
													"   \r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem incorreta retornada', () => {\r",
													"        pm.expect(response.email).have.string('email deve ser um email válido')\r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const message = 'email deve ser um email válido'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${message}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(message);\r",
													"    });\r",
													"\r",
													"//pm.test(\"Body matches string\", function () {\r",
													"  //  pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\"); //somente para testar se a resposta foi a mesma e se for ela passa no teste, função da a mesma resposta da função de cima!.\r",
													"//});\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"masterqa.com.br\",\r\n  \"password\": \"{{senhaValida2}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/login"
									},
									"response": [
										{
											"name": "Email inválido sem @",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"email\": \"{{emailInvalido}}\",\r\n  \"password\": \"{{senhaValida}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/login"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "07071d65-6894-4376-8f46-124248b044d5"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "50"
												},
												{
													"key": "Date",
													"value": "Mon, 15 Aug 2022 19:22:33 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"email deve ser um email válido\"\n}"
										}
									]
								},
								{
									"name": "CT32-SM-Login com senha inválida",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json(); //declara response como resposta da requisição\r",
													"\r",
													"//Valida o status code\r",
													"const statusCodeUn = 401\r",
													"pm.test(`Status: ${statusCodeUn},Unauthorized`, function () {\r",
													"    pm.response.to.have.status(statusCodeUn);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Unauthorized\", () => {\r",
													"  pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"pm.test(\"POST sem sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message']\r",
													"\r",
													"pm.test(`Resposta contém atributo \"email\"`, () => {\r",
													"        pm.expect(response[\"message\"]).to.exist\r",
													"   })\r",
													"   \r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem incorreta retornada', () => {\r",
													"        pm.expect(response.message).have.string('Email e/ou senha inválidos')\r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const message = 'Email e/ou senha inválidos'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${message}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(message);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"    console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/login"
									},
									"response": [
										{
											"name": "Senha inválida",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"{{senhaInvalida}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/login"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "cb52811b-0b1a-4b4f-b50d-d81205c26338"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "48"
												},
												{
													"key": "Date",
													"value": "Tue, 16 Aug 2022 12:20:26 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Email e/ou senha inválidos\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "/usuários-teste com erro esperado",
							"item": [
								{
									"name": "CT33-Buscar usuário com ID inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Bad Request\", () => {\r",
													"  pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"GET sem sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"\r",
													"    //Validação de Atributos (Presença)\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença '${atributo}'`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const message = 'Usuário não encontrado'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${message}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(message);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"    console.log(response) //coloca a resposta do body no console \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/usuarios/cbnW9qchtXdR6P"
									},
									"response": [
										{
											"name": "Usuário encontrado",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/usuarios/2i8b1zjVP37MbcWZ"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "89d089a7-6ac9-48ed-a2ae-880d73be77b3"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "151"
												},
												{
													"key": "Date",
													"value": "Wed, 10 Aug 2022 21:08:43 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"nome\": \"Fulano da Silva\",\n    \"email\": \"fulano@qa.com.br\",\n    \"password\": \"teste\",\n    \"administrador\": \"true\",\n    \"_id\": \"2i8b1zjVP37MbcWZ\"\n}"
										}
									]
								},
								{
									"name": "CT34-usuário já cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Bad Request\", () => {\r",
													"  pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message']\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem incorreta retornada, valida atributo de Conteúdo', () => {\r",
													"        pm.expect(response.message).have.string('Este email já está sendo usado')\r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const mensagem = 'Este email já está sendo usado'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"tamara\",\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"{{senhaValida}}\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/usuarios"
									},
									"response": [
										{
											"name": "Usuário cadastrado",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/usuarios"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "b631d39b-c7bc-43a9-8eb0-ce2759bc9c1d"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "82"
												},
												{
													"key": "Date",
													"value": "Tue, 16 Aug 2022 12:19:34 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"v1VdyCiyBTzAcstx\"\n}"
										}
									]
								},
								{
									"name": "CT35-Alterar usuário com adm vazio",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"console.log(response.message)  //coloca a resposta do body no console \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Bad Request\", () => {\r",
													"  pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"PUT sem sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença) \r",
													"const atributos = ['administrador']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const message = \"administrador deve ser 'true' ou 'false'\"          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${message}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(message);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"tamara@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{senhaValida}}\",\r\n  \"administrador\": \"{{admVazio}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/usuarios/{{idUalt}}"
									},
									"response": [
										{
											"name": "Alterar usuário",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n    \"nome\": \"Foster_Langos1\",\r\n    \"email\": \"Alessia16@yahoo.com\",\r\n    \"password\": \"teste\",\r\n    \"administrador\": \"true\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/usuarios/3nSgCL7v4RvkUxie"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "e78af378-41bf-4733-ae58-a42c5329f620"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "50"
												},
												{
													"key": "Date",
													"value": "Wed, 17 Aug 2022 21:46:07 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Registro alterado com sucesso\"\n}"
										}
									]
								},
								{
									"name": "CT36-Excluir usuário com carrinho",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"console.log(response) //coloca a resposta do body no console \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Bad Request\", () => {\r",
													"  pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"DELETE sem sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message','idCarrinho']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem retornada, valida atributo de conteúdo', () => {\r",
													"        pm.expect(response.message).have.string(\"Não é permitido excluir usuário com carrinho cadastrado\")\r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const mensagem = \"Não é permitido excluir usuário com carrinho cadastrado\"          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/usuarios/oUb7aGkMtSEPf6BZ"
									},
									"response": [
										{
											"name": "Excluir usuário com carrinho",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/usuarios/oUb7aGkMtSEPf6BZ"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "5e5ea86a-ee68-464f-a5ed-84eb6917802a"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "117"
												},
												{
													"key": "Date",
													"value": "Wed, 17 Aug 2022 21:17:05 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Não é permitido excluir usuário com carrinho cadastrado\",\n    \"idCarrinho\": \"qbMqntef4iTOwWfg\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "/produtos-teste com erro",
							"item": [
								{
									"name": "CT37-Buscar Produto inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Bad Request\", () => {\r",
													"  pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"GET sem sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const message = 'Produto não encontrado'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${message}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(message);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});\r",
													"\r",
													"console.log(response) //coloca a resposta do body no console"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/produtos/d0BtZveBWmm6JzX"
									},
									"response": [
										{
											"name": "Produto inexistente",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/produtos/{{idProduct}}"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "acbee68e-b578-4045-b54a-0afd4b7d3306"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "44"
												},
												{
													"key": "Date",
													"value": "Wed, 17 Aug 2022 22:15:34 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Produto não encontrado\"\n}"
										}
									]
								},
								{
									"name": "CT38-Nome em branco",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"console.log(response.nome)  //coloca a resposta do body no console \r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Bad Request\", () => {\r",
													"  pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"PUT sem sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença) \r",
													"const atributos = ['nome']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"//const atributos = ['message'] Tem a mesma função\r",
													"//pm.test(`Resposta contém atributo \"message\"`, () => {\r",
													"       // pm.expect(response[\"message\"]).to.exist\r",
													"  // })\r",
													"  \r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem retornada', () => {\r",
													"        pm.expect(response.nome).have.string(\"nome não pode ficar em branco\") \r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const message = \"nome não pode ficar em branco\"          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${message}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(message);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({   \r",
													"            \"email\": \"fulano@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 382\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/produtos/BeeJh5lz3k6kSIzA"
									},
									"response": [
										{
											"name": "Não pôde alterar sem nome",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"nome\": \"\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 382\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/produtos/BeeJh5lz3k6kSIzA"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "b5c8a85f-c51c-478a-8e94-0289680c1a03"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "48"
												},
												{
													"key": "Date",
													"value": "Thu, 18 Aug 2022 01:37:12 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"nome\": \"nome não pode ficar em branco\"\n}"
										}
									]
								},
								{
									"name": "CT39-Excluir produto que esta no carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({ \r",
													"            \"email\": \"fulano@qa.com.br\",\r",
													"            \"password\": \"teste\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
													"        pm.environment.set('token', response.json().authorization.slice(7))\r",
													"        console.log(response.json().authorization.slice(7))\r",
													"    }catch {\r",
													"        //operação se não rodar vai dar essa\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() //puxa a resposta na variável\r",
													"console.log(response) //coloca a resposta do body no console \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Verifique o texto do código de status:\r",
													"pm.test(\"Resposta status code Bad Request\", () => {\r",
													"  pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"DELETE sem sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"//Validação de Atributos (Presença)\r",
													"const atributos = ['message','idCarrinhos']\r",
													"\r",
													"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
													"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
													"        pm.expect(response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//Validação de Atributos (Conteúdo)\r",
													" pm.test('Mensagem retornada, valida atributo de conteúdo', () => {\r",
													"        pm.expect(response.message).have.string(\"Não é permitido excluir produto que faz parte de carrinho\")\r",
													"    })\r",
													"\r",
													"//Valida a mensagem principal\r",
													"const mensagem = \"Não é permitido excluir produto que faz parte de carrinho\"         //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
													"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
													"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
													"    });\r",
													"\r",
													"//Validação dos headers\r",
													"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
													"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
													"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options header is noopen\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
													"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
													"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date header is present\", () => {\r",
													"  pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection header is keep-alive\", () => {\r",
													"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
													"});\r",
													"\r",
													"pm.test(\"keep-alive header is timeout=5\", () => {\r",
													"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/produtos/BeeJh5lz3k6kSIzA"
									},
									"response": [
										{
											"name": "Excluir produto que esta no carrinho",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/produtos/{{_id}}"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "x-dns-prefetch-control",
													"value": "off"
												},
												{
													"key": "x-frame-options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "strict-transport-security",
													"value": "max-age=15552000; includeSubDomains"
												},
												{
													"key": "x-download-options",
													"value": "noopen"
												},
												{
													"key": "x-content-type-options",
													"value": "nosniff"
												},
												{
													"key": "x-xss-protection",
													"value": "1; mode=block"
												},
												{
													"key": "x-moesif-transaction-id",
													"value": "60e2c26a-4915-4220-954d-b5a37f5f9a59"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "135"
												},
												{
													"key": "Date",
													"value": "Wed, 17 Aug 2022 22:30:32 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Não é permitido excluir produto que faz parte de carrinho\",\n    \"idCarrinhos\": [\n        \"qbMqntef4iTOwWfg\"\n    ]\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Bugs e SM=Sugestão de melhoria e Bugs",
					"item": [
						{
							"name": "CT40-BUG/SM-Cadastra o usuário com uma senha de um caracter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json() //puxa a resposta na variável\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Verifique o texto do código de status:\r",
											"pm.test(\"Resposta status code Created\", () => {\r",
											"  pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//Validação de Atributos (Presença)\r",
											"const atributos = ['message','_id']\r",
											"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
											"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//Validação de Atributos (Conteúdo)\r",
											" pm.test('Mensagem correta retornada, valida atributo de Conteúdo', () => {\r",
											"        pm.expect(response.message).have.string(\"Cadastro realizado com sucesso\")\r",
											"    })\r",
											"\r",
											"//Valida a mensagem principal\r",
											"const mensagem = \"Cadastro realizado com sucesso\"          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
											"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
											"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
											"    });\r",
											"\r",
											"//Validação dos headers\r",
											"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
											"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
											"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options header is noopen\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
											"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date header is present\", () => {\r",
											"  pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection header is keep-alive\", () => {\r",
											"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
											"});\r",
											"\r",
											"pm.test(\"keep-alive header is timeout=5\", () => {\r",
											"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
											"});\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"pm.test(\"Já exclui o usuario\", function (){\r",
											"const response = pm.response.json();\r",
											"pm.environment.set('id', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"console.log(response) //coloca a resposta do body no console "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({   \r",
											"            \"email\": \"tamara@qa.com.br\",\r",
											"            \"password\": \"teste\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"pm.sendRequest(postRequest, (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
											"        pm.environment.set('token', response.json().authorization.slice(7))\r",
											"        console.log(response.json().authorization.slice(7))\r",
											"    }catch {\r",
											"        //operação se não rodar vai dar essa\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"tamara\",\r\n  \"email\": \"scrumm@qa.com.br\",\r\n  \"password\": \".\",\r\n  \"administrador\":\"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "CT41-BUG/SM-Cadastra o usuário mesmo com email fora do padrão e senha de apenas um caracter;",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json() //puxa a resposta na variável\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Verifique o texto do código de status:\r",
											"pm.test(\"Resposta status code Created\", () => {\r",
											"  pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//Validação de Atributos (Presença)\r",
											"const atributos = ['message','_id']\r",
											"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
											"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//Validação de Atributos (Conteúdo)\r",
											" pm.test('Mensagem correta retornada, valida atributo de Conteúdo', () => {\r",
											"        pm.expect(response.message).have.string(\"Cadastro realizado com sucesso\")\r",
											"    })\r",
											"\r",
											"//Valida a mensagem principal\r",
											"const mensagem = \"Cadastro realizado com sucesso\"          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
											"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
											"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
											"    });\r",
											"\r",
											"//Validação dos headers\r",
											"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
											"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
											"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options header is noopen\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
											"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date header is present\", () => {\r",
											"  pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection header is keep-alive\", () => {\r",
											"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
											"});\r",
											"\r",
											"pm.test(\"keep-alive header is timeout=5\", () => {\r",
											"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
											"});\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"pm.test(\"Já exclui o usuario\", function (){\r",
											"const response = pm.response.json();\r",
											"pm.environment.set('id', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"console.log(response) //coloca a resposta do body no console "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({   \r",
											"            \"email\": \"tamara@qa.com.br\",\r",
											"            \"password\": \"teste\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"pm.sendRequest(postRequest, (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
											"        pm.environment.set('token', response.json().authorization.slice(7))\r",
											"        console.log(response.json().authorization.slice(7))\r",
											"    }catch {\r",
											"        //operação se não rodar vai dar essa\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"tamara\",\r\n  \"email\": \"~ç@gq.br\",\r\n  \"password\": \".\",\r\n  \"administrador\":\"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "CT42-SM-Busca Produto com ID vazio lista todos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json() //puxa a resposta na variável\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Verifique o texto do código de status:\r",
											"pm.test(\"Resposta status code OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//Validação de Atributos (Presença)\r",
											"const atributos = ['quantidade','produtos']\r",
											"\r",
											"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//Validação dos headers\r",
											"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
											"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
											"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options header is noopen\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
											"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date header is present\", () => {\r",
											"  pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection header is keep-alive\", () => {\r",
											"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
											"});\r",
											"\r",
											"pm.test(\"keep-alive header is timeout=5\", () => {\r",
											"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
											"});\r",
											"\r",
											"//QUANDO BUSCA SEM ID ELE LISTA OS PRODUTOS EXISTENTES\r",
											"console.log(response) //coloca a resposta do body no console \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/produtos/{{idVazio}}"
							},
							"response": []
						},
						{
							"name": "CT43-SM-Busca Usuário com ID vazio e lista todos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json() //puxa a resposta na variável\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Verifique o texto do código de status:\r",
											"pm.test(\"Resposta status code OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"    //Validação de Atributos (Presença)\r",
											"const atributos = ['quantidade','usuarios']\r",
											"\r",
											"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
											"    pm.test(`Resposta contém atributo presença '${atributo}'`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//Validação dos headers\r",
											"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
											"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
											"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options header is noopen\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
											"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date header is present\", () => {\r",
											"  pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection header is keep-alive\", () => {\r",
											"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
											"});\r",
											"\r",
											"pm.test(\"keep-alive header is timeout=5\", () => {\r",
											"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
											"});\r",
											"\r",
											"    console.log(response) //coloca a resposta do body no console \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({   \r",
											"            \"email\": \"tamara@qa.com.br\",\r",
											"            \"password\": \"teste\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"pm.sendRequest(postRequest, (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
											"        pm.environment.set('token', response.json().authorization.slice(7))\r",
											"        console.log(response.json().authorization.slice(7))\r",
											"    }catch {\r",
											"        //operação se não rodar vai dar essa\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/usuarios/{{idVazio}}"
							},
							"response": []
						},
						{
							"name": "CT44-SM-Buscar carrinho sem ID lista todos os carrinhos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json(); //declara response como resposta da requisição\r",
											"//Valida o status code\r",
											"const statusCode = 200\r",
											"pm.test(`Status: ${statusCode}, OK, carrinho buscado`, function () {\r",
											"    pm.response.to.have.status(statusCode);\r",
											"});\r",
											"\r",
											"//Verifique o texto do código de status:\r",
											"pm.test(\"Resposta status code OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//Validação de Atributos (Presença)\r",
											"const atributos = ['quantidade','carrinhos']\r",
											"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
											"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//Validação dos headers\r",
											"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
											"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
											"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options header is noopen\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
											"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date header is present\", () => {\r",
											"  pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection header is keep-alive\", () => {\r",
											"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
											"});\r",
											"\r",
											"pm.test(\"keep-alive header is timeout=5\", () => {\r",
											"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
											"});\r",
											"\r",
											"console.log(response) //coloca a resposta do body no console"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/carrinhos"
							},
							"response": []
						},
						{
							"name": "CT45-BUG/SM-Cadastra o produto com um caracter ao invés de um nome padrão",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({ \r",
											"           \"email\": \"tamara@qa.com.br\",\r",
											"           \"password\": \"teste\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"pm.sendRequest(postRequest, (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
											"        pm.environment.set('token', response.json().authorization.slice(7))\r",
											"        console.log(response.json().authorization.slice(7))\r",
											"    }catch {\r",
											"        //operação se não rodar vai dar essa\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json() //puxa a resposta na variável\r",
											"console.log(response) //coloca a resposta do body no console \r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Verifique o texto do código de status:\r",
											"pm.test(\"Resposta status code Created\", () => {\r",
											"  pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//Validação de Atributos (Presença)\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
											"    pm.test(`Resposta contém atributo presença \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//Validação de Atributos (Conteúdo)\r",
											" pm.test('Mensagem correta retornada, valida atributo de Conteúdo', () => {\r",
											"        pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
											"    })\r",
											"\r",
											"     //Valida a mensagem principal\r",
											"const mensagem = 'Cadastro realizado com sucesso'          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
											"    pm.test(`Mensagem \"${mensagem}\" é exibida`, function () {\r",
											"         pm.expect(JSON.stringify(response)).to.include(mensagem);\r",
											"    });\r",
											"\r",
											"//Validação dos headers\r",
											"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
											"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
											"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options header is noopen\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
											"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date header is present\", () => {\r",
											"  pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection header is keep-alive\", () => {\r",
											"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
											"});\r",
											"\r",
											"pm.test(\"keep-alive header is timeout=5\", () => {\r",
											"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
											"});\r",
											"\r",
											"//Excluir produto cadastrado\r",
											" pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idP', response._id);\r",
											"})\r",
											"\r",
											"let token = 'Bearer ' + pm.environment.get('token')\r",
											"console.log(pm.environment.get('token'))\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idP');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url:`${url}/produtos/${id}`,\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json',\r",
											"         'Authorization' : `${token}`\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \".\",\r\n  \"preco\": 200,\r\n  \"descricao\": \"aparelho telefonico marca tal\",\r\n  \"quantidade\": 300\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos"
							},
							"response": []
						},
						{
							"name": "CT46-SM-token ausente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json() //puxa a resposta na variável\r",
											"console.log(response.nome)  //coloca a resposta do body no console \r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"//Verifique o texto do código de status:\r",
											"pm.test(\"Resposta status code Unauthorized\", () => {\r",
											"  pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT sem sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//Validação de Atributos (Presença) \r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {   //Mais simplificado e menos linhas para adicionar mais de uma resposta/atributo na mesma constante\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"//const atributos = ['message'] Tem a mesma função\r",
											"//pm.test(`Resposta contém atributo \"message\"`, () => {\r",
											"       // pm.expect(response[\"message\"]).to.exist\r",
											"  // })\r",
											"  \r",
											"//Validação de Atributos (Conteúdo)\r",
											" pm.test('Mensagem retornada', () => {\r",
											"        pm.expect(response.message).have.string(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\") \r",
											"    })\r",
											"\r",
											"//Valida a mensagem principal\r",
											"const message = \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"          //somente para testar se a resposta foi a mesma e se for ela passa no teste\r",
											"    pm.test(`Mensagem \"${message}\" é exibida`, function () {\r",
											"         pm.expect(JSON.stringify(response)).to.include(message);\r",
											"    });\r",
											"\r",
											"//Validação dos headers\r",
											"pm.test(\"Access-Control-Allow-Origin header is *\", () => {\r",
											"  pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control header is off\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-dns-prefetch-control')).to.eql('off');\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is SAMEORIGIN\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-frame-options')).to.eql('SAMEORIGIN');\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security header is max-age=15552000; includeSubDomains\", () => {\r",
											"  pm.expect(pm.response.headers.get('strict-transport-security')).to.eql('max-age=15552000; includeSubDomains');\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options header is noopen\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-download-options')).to.eql('noopen');\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options header is nosniff\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection header is 1; mode=block\", () => {\r",
											"  pm.expect(pm.response.headers.get('x-xss-protection')).to.eql('1; mode=block');\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id header is present\", () => {\r",
											"  pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date header is present\", () => {\r",
											"  pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection header is keep-alive\", () => {\r",
											"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
											"});\r",
											"\r",
											"pm.test(\"keep-alive header is timeout=5\", () => {\r",
											"  pm.expect(pm.response.headers.get('keep-alive')).to.eql('timeout=5');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({   \r",
											"            \"email\": \"fulano@qa.com.br\",\r",
											"            \"password\": \"teste\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"pm.sendRequest(postRequest, (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operação (deixa mais robusta a op.) se funciona da essa opção\r",
											"        pm.environment.set('token', response.json().authorization.slice(7))\r",
											"        console.log(response.json().authorization.slice(7))\r",
											"    }catch {\r",
											"        //operação se não rodar vai dar essa\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 382\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos/BeeJh5lz3k6kSIzA"
							},
							"response": []
						}
					]
				}
			]
		}
	]
}